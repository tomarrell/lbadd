// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: command.proto

//lint:file-ignore SA1019 Generated deprecated import

package message

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JoinType int32

const (
	JoinType_JoinUnknown   JoinType = 0
	JoinType_JoinLeft      JoinType = 1
	JoinType_JoinLeftOuter JoinType = 2
	JoinType_JoinInner     JoinType = 3
	JoinType_JoinCross     JoinType = 4
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "JoinUnknown",
		1: "JoinLeft",
		2: "JoinLeftOuter",
		3: "JoinInner",
		4: "JoinCross",
	}
	JoinType_value = map[string]int32{
		"JoinUnknown":   0,
		"JoinLeft":      1,
		"JoinLeftOuter": 2,
		"JoinInner":     3,
		"JoinCross":     4,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[0].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[0]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

type UpdateOr int32

const (
	UpdateOr_UpdateOrUnknown  UpdateOr = 0
	UpdateOr_UpdateOrRollback UpdateOr = 1
	UpdateOr_UpdateOrAbort    UpdateOr = 2
	UpdateOr_UpdateOrReplace  UpdateOr = 3
	UpdateOr_UpdateOrFail     UpdateOr = 4
	UpdateOr_UpdateOrIgnore   UpdateOr = 5
)

// Enum value maps for UpdateOr.
var (
	UpdateOr_name = map[int32]string{
		0: "UpdateOrUnknown",
		1: "UpdateOrRollback",
		2: "UpdateOrAbort",
		3: "UpdateOrReplace",
		4: "UpdateOrFail",
		5: "UpdateOrIgnore",
	}
	UpdateOr_value = map[string]int32{
		"UpdateOrUnknown":  0,
		"UpdateOrRollback": 1,
		"UpdateOrAbort":    2,
		"UpdateOrReplace":  3,
		"UpdateOrFail":     4,
		"UpdateOrIgnore":   5,
	}
)

func (x UpdateOr) Enum() *UpdateOr {
	p := new(UpdateOr)
	*p = x
	return p
}

func (x UpdateOr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateOr) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[1].Descriptor()
}

func (UpdateOr) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[1]
}

func (x UpdateOr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateOr.Descriptor instead.
func (UpdateOr) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

type InsertOr int32

const (
	InsertOr_InsertOrUnknown  InsertOr = 0
	InsertOr_InsertOrReplace  InsertOr = 1
	InsertOr_InsertOrRollback InsertOr = 2
	InsertOr_InsertOrAbort    InsertOr = 3
	InsertOr_InsertOrFail     InsertOr = 4
	InsertOr_InsertOrIgnore   InsertOr = 5
)

// Enum value maps for InsertOr.
var (
	InsertOr_name = map[int32]string{
		0: "InsertOrUnknown",
		1: "InsertOrReplace",
		2: "InsertOrRollback",
		3: "InsertOrAbort",
		4: "InsertOrFail",
		5: "InsertOrIgnore",
	}
	InsertOr_value = map[string]int32{
		"InsertOrUnknown":  0,
		"InsertOrReplace":  1,
		"InsertOrRollback": 2,
		"InsertOrAbort":    3,
		"InsertOrFail":     4,
		"InsertOrIgnore":   5,
	}
)

func (x InsertOr) Enum() *InsertOr {
	p := new(InsertOr)
	*p = x
	return p
}

func (x InsertOr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertOr) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[2].Descriptor()
}

func (InsertOr) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[2]
}

func (x InsertOr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertOr.Descriptor instead.
func (InsertOr) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

type DropTarget int32

const (
	DropTarget_Table   DropTarget = 0
	DropTarget_View    DropTarget = 1
	DropTarget_Index   DropTarget = 2
	DropTarget_Trigger DropTarget = 3
)

// Enum value maps for DropTarget.
var (
	DropTarget_name = map[int32]string{
		0: "Table",
		1: "View",
		2: "Index",
		3: "Trigger",
	}
	DropTarget_value = map[string]int32{
		"Table":   0,
		"View":    1,
		"Index":   2,
		"Trigger": 3,
	}
)

func (x DropTarget) Enum() *DropTarget {
	p := new(DropTarget)
	*p = x
	return p
}

func (x DropTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[3].Descriptor()
}

func (DropTarget) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[3]
}

func (x DropTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropTarget.Descriptor instead.
func (DropTarget) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

type SimpleTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema  string `protobuf:"bytes,1,opt,name=Schema,proto3" json:"Schema,omitempty"`
	Table   string `protobuf:"bytes,2,opt,name=Table,proto3" json:"Table,omitempty"`
	Alias   string `protobuf:"bytes,3,opt,name=Alias,proto3" json:"Alias,omitempty"`
	Indexed bool   `protobuf:"varint,4,opt,name=Indexed,proto3" json:"Indexed,omitempty"`
	Index   string `protobuf:"bytes,5,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *SimpleTable) Reset() {
	*x = SimpleTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTable) ProtoMessage() {}

func (x *SimpleTable) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTable.ProtoReflect.Descriptor instead.
func (*SimpleTable) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleTable) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SimpleTable) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *SimpleTable) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *SimpleTable) GetIndexed() bool {
	if x != nil {
		return x.Indexed
	}
	return false
}

func (x *SimpleTable) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type UpdateSetter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cols []string `protobuf:"bytes,1,rep,name=Cols,proto3" json:"Cols,omitempty"`
	// Types that are assignable to Value:
	//	*UpdateSetter_Literal
	//	*UpdateSetter_Constant
	//	*UpdateSetter_Unary
	//	*UpdateSetter_Binary
	//	*UpdateSetter_Func
	//	*UpdateSetter_Equality
	//	*UpdateSetter_Range
	Value isUpdateSetter_Value `protobuf_oneof:"Value"`
}

func (x *UpdateSetter) Reset() {
	*x = UpdateSetter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSetter) ProtoMessage() {}

func (x *UpdateSetter) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSetter.ProtoReflect.Descriptor instead.
func (*UpdateSetter) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateSetter) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (m *UpdateSetter) GetValue() isUpdateSetter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UpdateSetter) GetLiteral() *LiteralExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *UpdateSetter) GetConstant() *ConstantBooleanExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *UpdateSetter) GetUnary() *UnaryExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *UpdateSetter) GetBinary() *BinaryExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *UpdateSetter) GetFunc() *FunctionExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Func); ok {
		return x.Func
	}
	return nil
}

func (x *UpdateSetter) GetEquality() *EqualityExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Equality); ok {
		return x.Equality
	}
	return nil
}

func (x *UpdateSetter) GetRange() *RangeExpr {
	if x, ok := x.GetValue().(*UpdateSetter_Range); ok {
		return x.Range
	}
	return nil
}

type isUpdateSetter_Value interface {
	isUpdateSetter_Value()
}

type UpdateSetter_Literal struct {
	Literal *LiteralExpr `protobuf:"bytes,2,opt,name=literal,proto3,oneof"`
}

type UpdateSetter_Constant struct {
	Constant *ConstantBooleanExpr `protobuf:"bytes,3,opt,name=constant,proto3,oneof"`
}

type UpdateSetter_Unary struct {
	Unary *UnaryExpr `protobuf:"bytes,4,opt,name=unary,proto3,oneof"`
}

type UpdateSetter_Binary struct {
	Binary *BinaryExpr `protobuf:"bytes,5,opt,name=binary,proto3,oneof"`
}

type UpdateSetter_Func struct {
	Func *FunctionExpr `protobuf:"bytes,6,opt,name=func,proto3,oneof"`
}

type UpdateSetter_Equality struct {
	Equality *EqualityExpr `protobuf:"bytes,7,opt,name=equality,proto3,oneof"`
}

type UpdateSetter_Range struct {
	Range *RangeExpr `protobuf:"bytes,8,opt,name=range,proto3,oneof"`
}

func (*UpdateSetter_Literal) isUpdateSetter_Value() {}

func (*UpdateSetter_Constant) isUpdateSetter_Value() {}

func (*UpdateSetter_Unary) isUpdateSetter_Value() {}

func (*UpdateSetter_Binary) isUpdateSetter_Value() {}

func (*UpdateSetter_Func) isUpdateSetter_Value() {}

func (*UpdateSetter_Equality) isUpdateSetter_Value() {}

func (*UpdateSetter_Range) isUpdateSetter_Value() {}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table  string `protobuf:"bytes,1,opt,name=Table,proto3" json:"Table,omitempty"`
	Column *Expr  `protobuf:"bytes,2,opt,name=Column,proto3" json:"Column,omitempty"`
	Alias  string `protobuf:"bytes,3,opt,name=Alias,proto3" json:"Alias,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Column) GetColumn() *Expr {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *Column) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to List:
	//	*List_Scan
	//	*List_Select
	//	*List_Project
	//	*List_Join
	//	*List_Limit
	//	*List_Offset
	//	*List_Distinct
	//	*List_Values
	List isList_List `protobuf_oneof:"list"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

func (m *List) GetList() isList_List {
	if m != nil {
		return m.List
	}
	return nil
}

func (x *List) GetScan() *Command_Scan {
	if x, ok := x.GetList().(*List_Scan); ok {
		return x.Scan
	}
	return nil
}

func (x *List) GetSelect() *Command_Select {
	if x, ok := x.GetList().(*List_Select); ok {
		return x.Select
	}
	return nil
}

func (x *List) GetProject() *Command_Project {
	if x, ok := x.GetList().(*List_Project); ok {
		return x.Project
	}
	return nil
}

func (x *List) GetJoin() *Command_Join {
	if x, ok := x.GetList().(*List_Join); ok {
		return x.Join
	}
	return nil
}

func (x *List) GetLimit() *Command_Limit {
	if x, ok := x.GetList().(*List_Limit); ok {
		return x.Limit
	}
	return nil
}

func (x *List) GetOffset() *Command_Offset {
	if x, ok := x.GetList().(*List_Offset); ok {
		return x.Offset
	}
	return nil
}

func (x *List) GetDistinct() *Command_Distinct {
	if x, ok := x.GetList().(*List_Distinct); ok {
		return x.Distinct
	}
	return nil
}

func (x *List) GetValues() *Command_Values {
	if x, ok := x.GetList().(*List_Values); ok {
		return x.Values
	}
	return nil
}

type isList_List interface {
	isList_List()
}

type List_Scan struct {
	Scan *Command_Scan `protobuf:"bytes,1,opt,name=scan,proto3,oneof"`
}

type List_Select struct {
	Select *Command_Select `protobuf:"bytes,2,opt,name=select,proto3,oneof"`
}

type List_Project struct {
	Project *Command_Project `protobuf:"bytes,3,opt,name=project,proto3,oneof"`
}

type List_Join struct {
	Join *Command_Join `protobuf:"bytes,4,opt,name=join,proto3,oneof"`
}

type List_Limit struct {
	Limit *Command_Limit `protobuf:"bytes,5,opt,name=limit,proto3,oneof"`
}

type List_Offset struct {
	Offset *Command_Offset `protobuf:"bytes,6,opt,name=offset,proto3,oneof"`
}

type List_Distinct struct {
	Distinct *Command_Distinct `protobuf:"bytes,7,opt,name=distinct,proto3,oneof"`
}

type List_Values struct {
	Values *Command_Values `protobuf:"bytes,8,opt,name=values,proto3,oneof"`
}

func (*List_Scan) isList_List() {}

func (*List_Select) isList_List() {}

func (*List_Project) isList_List() {}

func (*List_Join) isList_List() {}

func (*List_Limit) isList_List() {}

func (*List_Offset) isList_List() {}

func (*List_Distinct) isList_List() {}

func (*List_Values) isList_List() {}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4}
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//	*Expr_Literal
	//	*Expr_Constant
	//	*Expr_Unary
	//	*Expr_Binary
	//	*Expr_Func
	//	*Expr_Equality
	//	*Expr_Range
	Expr isExpr_Expr `protobuf_oneof:"expr"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{5}
}

func (m *Expr) GetExpr() isExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *Expr) GetLiteral() *LiteralExpr {
	if x, ok := x.GetExpr().(*Expr_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *Expr) GetConstant() *ConstantBooleanExpr {
	if x, ok := x.GetExpr().(*Expr_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *Expr) GetUnary() *UnaryExpr {
	if x, ok := x.GetExpr().(*Expr_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *Expr) GetBinary() *BinaryExpr {
	if x, ok := x.GetExpr().(*Expr_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Expr) GetFunc() *FunctionExpr {
	if x, ok := x.GetExpr().(*Expr_Func); ok {
		return x.Func
	}
	return nil
}

func (x *Expr) GetEquality() *EqualityExpr {
	if x, ok := x.GetExpr().(*Expr_Equality); ok {
		return x.Equality
	}
	return nil
}

func (x *Expr) GetRange() *RangeExpr {
	if x, ok := x.GetExpr().(*Expr_Range); ok {
		return x.Range
	}
	return nil
}

type isExpr_Expr interface {
	isExpr_Expr()
}

type Expr_Literal struct {
	Literal *LiteralExpr `protobuf:"bytes,1,opt,name=literal,proto3,oneof"`
}

type Expr_Constant struct {
	Constant *ConstantBooleanExpr `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type Expr_Unary struct {
	Unary *UnaryExpr `protobuf:"bytes,3,opt,name=unary,proto3,oneof"`
}

type Expr_Binary struct {
	Binary *BinaryExpr `protobuf:"bytes,4,opt,name=binary,proto3,oneof"`
}

type Expr_Func struct {
	Func *FunctionExpr `protobuf:"bytes,5,opt,name=func,proto3,oneof"`
}

type Expr_Equality struct {
	Equality *EqualityExpr `protobuf:"bytes,6,opt,name=equality,proto3,oneof"`
}

type Expr_Range struct {
	Range *RangeExpr `protobuf:"bytes,7,opt,name=range,proto3,oneof"`
}

func (*Expr_Literal) isExpr_Expr() {}

func (*Expr_Constant) isExpr_Expr() {}

func (*Expr_Unary) isExpr_Expr() {}

func (*Expr_Binary) isExpr_Expr() {}

func (*Expr_Func) isExpr_Expr() {}

func (*Expr_Equality) isExpr_Expr() {}

func (*Expr_Range) isExpr_Expr() {}

type RepeatedExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*Expr `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *RepeatedExpr) Reset() {
	*x = RepeatedExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedExpr) ProtoMessage() {}

func (x *RepeatedExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedExpr.ProtoReflect.Descriptor instead.
func (*RepeatedExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{6}
}

func (x *RepeatedExpr) GetExpr() []*Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type LiteralExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *LiteralExpr) Reset() {
	*x = LiteralExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralExpr) ProtoMessage() {}

func (x *LiteralExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralExpr.ProtoReflect.Descriptor instead.
func (*LiteralExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7}
}

func (x *LiteralExpr) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConstantBooleanExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ConstantBooleanExpr) Reset() {
	*x = ConstantBooleanExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantBooleanExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantBooleanExpr) ProtoMessage() {}

func (x *ConstantBooleanExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantBooleanExpr.ProtoReflect.Descriptor instead.
func (*ConstantBooleanExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{8}
}

func (x *ConstantBooleanExpr) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type UnaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Value    *Expr  `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *UnaryExpr) Reset() {
	*x = UnaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpr) ProtoMessage() {}

func (x *UnaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpr.ProtoReflect.Descriptor instead.
func (*UnaryExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{9}
}

func (x *UnaryExpr) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UnaryExpr) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

type BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Left     *Expr  `protobuf:"bytes,2,opt,name=Left,proto3" json:"Left,omitempty"`
	Right    *Expr  `protobuf:"bytes,3,opt,name=Right,proto3" json:"Right,omitempty"`
}

func (x *BinaryExpr) Reset() {
	*x = BinaryExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpr) ProtoMessage() {}

func (x *BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpr.ProtoReflect.Descriptor instead.
func (*BinaryExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{10}
}

func (x *BinaryExpr) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BinaryExpr) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *BinaryExpr) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

type FunctionExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Distinct bool    `protobuf:"varint,2,opt,name=Distinct,proto3" json:"Distinct,omitempty"`
	Args     []*Expr `protobuf:"bytes,3,rep,name=Args,proto3" json:"Args,omitempty"`
}

func (x *FunctionExpr) Reset() {
	*x = FunctionExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionExpr) ProtoMessage() {}

func (x *FunctionExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionExpr.ProtoReflect.Descriptor instead.
func (*FunctionExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{11}
}

func (x *FunctionExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionExpr) GetDistinct() bool {
	if x != nil {
		return x.Distinct
	}
	return false
}

func (x *FunctionExpr) GetArgs() []*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

type EqualityExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left   *Expr `protobuf:"bytes,1,opt,name=Left,proto3" json:"Left,omitempty"`
	Right  *Expr `protobuf:"bytes,2,opt,name=Right,proto3" json:"Right,omitempty"`
	Invert bool  `protobuf:"varint,3,opt,name=Invert,proto3" json:"Invert,omitempty"`
}

func (x *EqualityExpr) Reset() {
	*x = EqualityExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqualityExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqualityExpr) ProtoMessage() {}

func (x *EqualityExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqualityExpr.ProtoReflect.Descriptor instead.
func (*EqualityExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{12}
}

func (x *EqualityExpr) GetLeft() *Expr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *EqualityExpr) GetRight() *Expr {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *EqualityExpr) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

type RangeExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Needle *Expr `protobuf:"bytes,1,opt,name=Needle,proto3" json:"Needle,omitempty"`
	Lo     *Expr `protobuf:"bytes,2,opt,name=Lo,proto3" json:"Lo,omitempty"`
	Hi     *Expr `protobuf:"bytes,3,opt,name=Hi,proto3" json:"Hi,omitempty"`
	Invert bool  `protobuf:"varint,4,opt,name=Invert,proto3" json:"Invert,omitempty"`
}

func (x *RangeExpr) Reset() {
	*x = RangeExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeExpr) ProtoMessage() {}

func (x *RangeExpr) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeExpr.ProtoReflect.Descriptor instead.
func (*RangeExpr) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{13}
}

func (x *RangeExpr) GetNeedle() *Expr {
	if x != nil {
		return x.Needle
	}
	return nil
}

func (x *RangeExpr) GetLo() *Expr {
	if x != nil {
		return x.Lo
	}
	return nil
}

func (x *RangeExpr) GetHi() *Expr {
	if x != nil {
		return x.Hi
	}
	return nil
}

func (x *RangeExpr) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

type Command_Scan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *SimpleTable `protobuf:"bytes,1,opt,name=Table,proto3" json:"Table,omitempty"`
}

func (x *Command_Scan) Reset() {
	*x = Command_Scan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Scan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Scan) ProtoMessage() {}

func (x *Command_Scan) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Scan.ProtoReflect.Descriptor instead.
func (*Command_Scan) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Command_Scan) GetTable() *SimpleTable {
	if x != nil {
		return x.Table
	}
	return nil
}

type Command_Select struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Expr `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Input  *List `protobuf:"bytes,2,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *Command_Select) Reset() {
	*x = Command_Select{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Select) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Select) ProtoMessage() {}

func (x *Command_Select) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Select.ProtoReflect.Descriptor instead.
func (*Command_Select) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Command_Select) GetFilter() *Expr {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Command_Select) GetInput() *List {
	if x != nil {
		return x.Input
	}
	return nil
}

type Command_Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cols  []*Column `protobuf:"bytes,1,rep,name=Cols,proto3" json:"Cols,omitempty"`
	Input *List     `protobuf:"bytes,2,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *Command_Project) Reset() {
	*x = Command_Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Project) ProtoMessage() {}

func (x *Command_Project) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Project.ProtoReflect.Descriptor instead.
func (*Command_Project) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Command_Project) GetCols() []*Column {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *Command_Project) GetInput() *List {
	if x != nil {
		return x.Input
	}
	return nil
}

type Command_Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table  *SimpleTable `protobuf:"bytes,1,opt,name=Table,proto3" json:"Table,omitempty"`
	Filter *Expr        `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *Command_Delete) Reset() {
	*x = Command_Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Delete) ProtoMessage() {}

func (x *Command_Delete) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Delete.ProtoReflect.Descriptor instead.
func (*Command_Delete) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Command_Delete) GetTable() *SimpleTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Command_Delete) GetFilter() *Expr {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CommandDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   DropTarget `protobuf:"varint,1,opt,name=target,proto3,enum=message.DropTarget" json:"target,omitempty"`
	IfExists bool       `protobuf:"varint,2,opt,name=IfExists,proto3" json:"IfExists,omitempty"`
	Schema   string     `protobuf:"bytes,3,opt,name=Schema,proto3" json:"Schema,omitempty"`
	Name     string     `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *CommandDrop) Reset() {
	*x = CommandDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDrop) ProtoMessage() {}

func (x *CommandDrop) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDrop.ProtoReflect.Descriptor instead.
func (*CommandDrop) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 4}
}

func (x *CommandDrop) GetTarget() DropTarget {
	if x != nil {
		return x.Target
	}
	return DropTarget_Table
}

func (x *CommandDrop) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *CommandDrop) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *CommandDrop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Command_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateOr UpdateOr        `protobuf:"varint,1,opt,name=UpdateOr,proto3,enum=message.UpdateOr" json:"UpdateOr,omitempty"`
	Table    *SimpleTable    `protobuf:"bytes,2,opt,name=Table,proto3" json:"Table,omitempty"`
	Updates  []*UpdateSetter `protobuf:"bytes,3,rep,name=Updates,proto3" json:"Updates,omitempty"`
	Filter   *Expr           `protobuf:"bytes,4,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *Command_Update) Reset() {
	*x = Command_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Update) ProtoMessage() {}

func (x *Command_Update) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Update.ProtoReflect.Descriptor instead.
func (*Command_Update) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Command_Update) GetUpdateOr() UpdateOr {
	if x != nil {
		return x.UpdateOr
	}
	return UpdateOr_UpdateOrUnknown
}

func (x *Command_Update) GetTable() *SimpleTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Command_Update) GetUpdates() []*UpdateSetter {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *Command_Update) GetFilter() *Expr {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Command_Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Natural bool     `protobuf:"varint,1,opt,name=Natural,proto3" json:"Natural,omitempty"`
	Type    JoinType `protobuf:"varint,2,opt,name=Type,proto3,enum=message.JoinType" json:"Type,omitempty"`
	Filter  *Expr    `protobuf:"bytes,3,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Left    *List    `protobuf:"bytes,4,opt,name=Left,proto3" json:"Left,omitempty"`
	Right   *List    `protobuf:"bytes,5,opt,name=Right,proto3" json:"Right,omitempty"`
}

func (x *Command_Join) Reset() {
	*x = Command_Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Join) ProtoMessage() {}

func (x *Command_Join) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Join.ProtoReflect.Descriptor instead.
func (*Command_Join) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Command_Join) GetNatural() bool {
	if x != nil {
		return x.Natural
	}
	return false
}

func (x *Command_Join) GetType() JoinType {
	if x != nil {
		return x.Type
	}
	return JoinType_JoinUnknown
}

func (x *Command_Join) GetFilter() *Expr {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Command_Join) GetLeft() *List {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *Command_Join) GetRight() *List {
	if x != nil {
		return x.Right
	}
	return nil
}

type Command_Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit *Expr `protobuf:"bytes,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Input *List `protobuf:"bytes,2,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *Command_Limit) Reset() {
	*x = Command_Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Limit) ProtoMessage() {}

func (x *Command_Limit) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Limit.ProtoReflect.Descriptor instead.
func (*Command_Limit) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Command_Limit) GetLimit() *Expr {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Command_Limit) GetInput() *List {
	if x != nil {
		return x.Input
	}
	return nil
}

type Command_Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset *Expr `protobuf:"bytes,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Input  *List `protobuf:"bytes,2,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *Command_Offset) Reset() {
	*x = Command_Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Offset) ProtoMessage() {}

func (x *Command_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Offset.ProtoReflect.Descriptor instead.
func (*Command_Offset) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 8}
}

func (x *Command_Offset) GetOffset() *Expr {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *Command_Offset) GetInput() *List {
	if x != nil {
		return x.Input
	}
	return nil
}

type Command_Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cols []*Column `protobuf:"bytes,1,rep,name=Cols,proto3" json:"Cols,omitempty"`
}

func (x *Command_Empty) Reset() {
	*x = Command_Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Empty) ProtoMessage() {}

func (x *Command_Empty) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Empty.ProtoReflect.Descriptor instead.
func (*Command_Empty) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 9}
}

func (x *Command_Empty) GetCols() []*Column {
	if x != nil {
		return x.Cols
	}
	return nil
}

type Command_Distinct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *List `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *Command_Distinct) Reset() {
	*x = Command_Distinct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Distinct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Distinct) ProtoMessage() {}

func (x *Command_Distinct) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Distinct.ProtoReflect.Descriptor instead.
func (*Command_Distinct) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 10}
}

func (x *Command_Distinct) GetInput() *List {
	if x != nil {
		return x.Input
	}
	return nil
}

type Command_Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*RepeatedExpr `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Command_Values) Reset() {
	*x = Command_Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Values) ProtoMessage() {}

func (x *Command_Values) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Values.ProtoReflect.Descriptor instead.
func (*Command_Values) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 11}
}

func (x *Command_Values) GetExpr() []*RepeatedExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Command_Insert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertOr      InsertOr     `protobuf:"varint,1,opt,name=InsertOr,proto3,enum=message.InsertOr" json:"InsertOr,omitempty"`
	Table         *SimpleTable `protobuf:"bytes,2,opt,name=Table,proto3" json:"Table,omitempty"`
	Cols          []*Column    `protobuf:"bytes,3,rep,name=Cols,proto3" json:"Cols,omitempty"`
	DefaultValues bool         `protobuf:"varint,4,opt,name=DefaultValues,proto3" json:"DefaultValues,omitempty"`
	Input         *List        `protobuf:"bytes,5,opt,name=Input,proto3" json:"Input,omitempty"`
}

func (x *Command_Insert) Reset() {
	*x = Command_Insert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Insert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Insert) ProtoMessage() {}

func (x *Command_Insert) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Insert.ProtoReflect.Descriptor instead.
func (*Command_Insert) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4, 12}
}

func (x *Command_Insert) GetInsertOr() InsertOr {
	if x != nil {
		return x.InsertOr
	}
	return InsertOr_InsertOrUnknown
}

func (x *Command_Insert) GetTable() *SimpleTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Command_Insert) GetCols() []*Column {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *Command_Insert) GetDefaultValues() bool {
	if x != nil {
		return x.DefaultValues
	}
	return false
}

func (x *Command_Insert) GetInput() *List {
	if x != nil {
		return x.Input
	}
	return nil
}

var File_command_proto protoreflect.FileDescriptor

var file_command_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x82, 0x03, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x6c,
	0x73, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5b, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xa0,
	0x03, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x63, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x63, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xcc, 0x0a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x32, 0x0a,
	0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0x54, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x53, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x5b, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x7b, 0x0a, 0x04, 0x64, 0x72, 0x6f,
	0x70, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbb, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x12, 0x2a, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0xb6, 0x01, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x51, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x54, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x2c, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x04, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x04,
	0x43, 0x6f, 0x6c, 0x73, 0x1a, 0x2f, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x33, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0xd3, 0x01, 0x0a, 0x06, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x52, 0x08, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x43, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x04, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0xe5, 0x02, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12,
	0x33, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x23, 0x0a, 0x0b, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a,
	0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x70, 0x0a, 0x0a, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x61, 0x0a,
	0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73,
	0x22, 0x6e, 0x0a, 0x0c, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x21, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x25,
	0x0a, 0x06, 0x4e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x4e,
	0x65, 0x65, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x4c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x02, 0x4c, 0x6f, 0x12, 0x1d, 0x0a, 0x02, 0x48, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x02, 0x48, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2a, 0x5a, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x65,
	0x66, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x6f, 0x69,
	0x6e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x10, 0x05, 0x2a, 0x83, 0x01,
	0x0a, 0x08, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x10, 0x05, 0x2a, 0x39, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x56, 0x69, 0x65, 0x77, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x10, 0x03, 0x42, 0x0b,
	0x5a, 0x09, 0x2e, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_command_proto_rawDescOnce sync.Once
	file_command_proto_rawDescData = file_command_proto_rawDesc
)

func file_command_proto_rawDescGZIP() []byte {
	file_command_proto_rawDescOnce.Do(func() {
		file_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_command_proto_rawDescData)
	})
	return file_command_proto_rawDescData
}

var file_command_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_command_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_command_proto_goTypes = []interface{}{
	(JoinType)(0),               // 0: message.JoinType
	(UpdateOr)(0),               // 1: message.UpdateOr
	(InsertOr)(0),               // 2: message.InsertOr
	(DropTarget)(0),             // 3: message.DropTarget
	(*SimpleTable)(nil),         // 4: message.SimpleTable
	(*UpdateSetter)(nil),        // 5: message.UpdateSetter
	(*Column)(nil),              // 6: message.Column
	(*List)(nil),                // 7: message.List
	(*Command)(nil),             // 8: message.Command
	(*Expr)(nil),                // 9: message.Expr
	(*RepeatedExpr)(nil),        // 10: message.repeatedExpr
	(*LiteralExpr)(nil),         // 11: message.LiteralExpr
	(*ConstantBooleanExpr)(nil), // 12: message.ConstantBooleanExpr
	(*UnaryExpr)(nil),           // 13: message.UnaryExpr
	(*BinaryExpr)(nil),          // 14: message.BinaryExpr
	(*FunctionExpr)(nil),        // 15: message.FunctionExpr
	(*EqualityExpr)(nil),        // 16: message.EqualityExpr
	(*RangeExpr)(nil),           // 17: message.RangeExpr
	(*Command_Scan)(nil),        // 18: message.Command.Scan
	(*Command_Select)(nil),      // 19: message.Command.Select
	(*Command_Project)(nil),     // 20: message.Command.Project
	(*Command_Delete)(nil),      // 21: message.Command.Delete
	(*CommandDrop)(nil),         // 22: message.Command.drop
	(*Command_Update)(nil),      // 23: message.Command.Update
	(*Command_Join)(nil),        // 24: message.Command.Join
	(*Command_Limit)(nil),       // 25: message.Command.Limit
	(*Command_Offset)(nil),      // 26: message.Command.Offset
	(*Command_Empty)(nil),       // 27: message.Command.Empty
	(*Command_Distinct)(nil),    // 28: message.Command.Distinct
	(*Command_Values)(nil),      // 29: message.Command.Values
	(*Command_Insert)(nil),      // 30: message.Command.Insert
}
var file_command_proto_depIdxs = []int32{
	11, // 0: message.UpdateSetter.literal:type_name -> message.LiteralExpr
	12, // 1: message.UpdateSetter.constant:type_name -> message.ConstantBooleanExpr
	13, // 2: message.UpdateSetter.unary:type_name -> message.UnaryExpr
	14, // 3: message.UpdateSetter.binary:type_name -> message.BinaryExpr
	15, // 4: message.UpdateSetter.func:type_name -> message.FunctionExpr
	16, // 5: message.UpdateSetter.equality:type_name -> message.EqualityExpr
	17, // 6: message.UpdateSetter.range:type_name -> message.RangeExpr
	9,  // 7: message.Column.Column:type_name -> message.Expr
	18, // 8: message.List.scan:type_name -> message.Command.Scan
	19, // 9: message.List.select:type_name -> message.Command.Select
	20, // 10: message.List.project:type_name -> message.Command.Project
	24, // 11: message.List.join:type_name -> message.Command.Join
	25, // 12: message.List.limit:type_name -> message.Command.Limit
	26, // 13: message.List.offset:type_name -> message.Command.Offset
	28, // 14: message.List.distinct:type_name -> message.Command.Distinct
	29, // 15: message.List.values:type_name -> message.Command.Values
	11, // 16: message.Expr.literal:type_name -> message.LiteralExpr
	12, // 17: message.Expr.constant:type_name -> message.ConstantBooleanExpr
	13, // 18: message.Expr.unary:type_name -> message.UnaryExpr
	14, // 19: message.Expr.binary:type_name -> message.BinaryExpr
	15, // 20: message.Expr.func:type_name -> message.FunctionExpr
	16, // 21: message.Expr.equality:type_name -> message.EqualityExpr
	17, // 22: message.Expr.range:type_name -> message.RangeExpr
	9,  // 23: message.repeatedExpr.expr:type_name -> message.Expr
	9,  // 24: message.UnaryExpr.Value:type_name -> message.Expr
	9,  // 25: message.BinaryExpr.Left:type_name -> message.Expr
	9,  // 26: message.BinaryExpr.Right:type_name -> message.Expr
	9,  // 27: message.FunctionExpr.Args:type_name -> message.Expr
	9,  // 28: message.EqualityExpr.Left:type_name -> message.Expr
	9,  // 29: message.EqualityExpr.Right:type_name -> message.Expr
	9,  // 30: message.RangeExpr.Needle:type_name -> message.Expr
	9,  // 31: message.RangeExpr.Lo:type_name -> message.Expr
	9,  // 32: message.RangeExpr.Hi:type_name -> message.Expr
	4,  // 33: message.Command.Scan.Table:type_name -> message.SimpleTable
	9,  // 34: message.Command.Select.Filter:type_name -> message.Expr
	7,  // 35: message.Command.Select.Input:type_name -> message.List
	6,  // 36: message.Command.Project.Cols:type_name -> message.Column
	7,  // 37: message.Command.Project.Input:type_name -> message.List
	4,  // 38: message.Command.Delete.Table:type_name -> message.SimpleTable
	9,  // 39: message.Command.Delete.Filter:type_name -> message.Expr
	3,  // 40: message.Command.drop.target:type_name -> message.DropTarget
	1,  // 41: message.Command.Update.UpdateOr:type_name -> message.UpdateOr
	4,  // 42: message.Command.Update.Table:type_name -> message.SimpleTable
	5,  // 43: message.Command.Update.Updates:type_name -> message.UpdateSetter
	9,  // 44: message.Command.Update.Filter:type_name -> message.Expr
	0,  // 45: message.Command.Join.Type:type_name -> message.JoinType
	9,  // 46: message.Command.Join.Filter:type_name -> message.Expr
	7,  // 47: message.Command.Join.Left:type_name -> message.List
	7,  // 48: message.Command.Join.Right:type_name -> message.List
	9,  // 49: message.Command.Limit.Limit:type_name -> message.Expr
	7,  // 50: message.Command.Limit.Input:type_name -> message.List
	9,  // 51: message.Command.Offset.Offset:type_name -> message.Expr
	7,  // 52: message.Command.Offset.Input:type_name -> message.List
	6,  // 53: message.Command.Empty.Cols:type_name -> message.Column
	7,  // 54: message.Command.Distinct.Input:type_name -> message.List
	10, // 55: message.Command.Values.expr:type_name -> message.repeatedExpr
	2,  // 56: message.Command.Insert.InsertOr:type_name -> message.InsertOr
	4,  // 57: message.Command.Insert.Table:type_name -> message.SimpleTable
	6,  // 58: message.Command.Insert.Cols:type_name -> message.Column
	7,  // 59: message.Command.Insert.Input:type_name -> message.List
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_command_proto_init() }
func file_command_proto_init() {
	if File_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSetter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstantBooleanExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EqualityExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Scan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Select); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Distinct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Insert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_command_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*UpdateSetter_Literal)(nil),
		(*UpdateSetter_Constant)(nil),
		(*UpdateSetter_Unary)(nil),
		(*UpdateSetter_Binary)(nil),
		(*UpdateSetter_Func)(nil),
		(*UpdateSetter_Equality)(nil),
		(*UpdateSetter_Range)(nil),
	}
	file_command_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*List_Scan)(nil),
		(*List_Select)(nil),
		(*List_Project)(nil),
		(*List_Join)(nil),
		(*List_Limit)(nil),
		(*List_Offset)(nil),
		(*List_Distinct)(nil),
		(*List_Values)(nil),
	}
	file_command_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Expr_Literal)(nil),
		(*Expr_Constant)(nil),
		(*Expr_Unary)(nil),
		(*Expr_Binary)(nil),
		(*Expr_Func)(nil),
		(*Expr_Equality)(nil),
		(*Expr_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_command_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_command_proto_goTypes,
		DependencyIndexes: file_command_proto_depIdxs,
		EnumInfos:         file_command_proto_enumTypes,
		MessageInfos:      file_command_proto_msgTypes,
	}.Build()
	File_command_proto = out.File
	file_command_proto_rawDesc = nil
	file_command_proto_goTypes = nil
	file_command_proto_depIdxs = nil
}
