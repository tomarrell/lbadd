// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	id "github.com/tomarrell/lbadd/internal/id"
	message "github.com/tomarrell/lbadd/internal/raft/message"

	mock "github.com/stretchr/testify/mock"

	network "github.com/tomarrell/lbadd/internal/network"
)

// Cluster is an autogenerated mock type for the Cluster type
type Cluster struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: _a0, _a1
func (_m *Cluster) Broadcast(_a0 context.Context, _a1 message.Message) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Cluster) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nodes provides a mock function with given fields:
func (_m *Cluster) Nodes() []network.Conn {
	ret := _m.Called()

	var r0 []network.Conn
	if rf, ok := ret.Get(0).(func() []network.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.Conn)
		}
	}

	return r0
}

// OwnID provides a mock function with given fields:
func (_m *Cluster) OwnID() id.ID {
	ret := _m.Called()

	var r0 id.ID
	if rf, ok := ret.Get(0).(func() id.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(id.ID)
		}
	}

	return r0
}

// Receive provides a mock function with given fields: _a0
func (_m *Cluster) Receive(_a0 context.Context) (network.Conn, message.Message, error) {
	ret := _m.Called(_a0)

	var r0 network.Conn
	if rf, ok := ret.Get(0).(func(context.Context) network.Conn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Conn)
		}
	}

	var r1 message.Message
	if rf, ok := ret.Get(1).(func(context.Context) message.Message); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(message.Message)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
